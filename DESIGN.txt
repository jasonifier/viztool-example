HOME PAGE
- Display logo
- Describe project and dataflow
- TBD: connect to metrics results and display chart

QUERY PAGE
- STYLE: light background for text box areas
- STYLE: rounded corners, shallow border for text boxes
- One text box for primary query terms
- One text box for secondary query terms
- Date range picker for start and end dates (**required**)
- Select datasets to query (**required**)
- Query Name text box (include a default name)
  - Note: queries to system will also append dataset selection names to each query
- Review and Submit button (color: green)
- Provide a query review modal after clicking above button
  - Note: should display query syntax tied to each dataset
  - Note: include light gray/blue "go back" button and a green "submit" button
- Section displaying previous queries and metadata (make collapsable)
  - Results page link (rowspan)
  - Query name
  - Dataset name
  - Query datetime
  - Executor UUID
  - Query ID
  - Link to other data GUI tool (always publish queries to the tool)

TODO: Review progress bars and modals to work with the query page
- https://www.w3schools.com/bootstrap4/bootstrap_progressbars.asp
- https://www.w3schools.com/bootstrap4/tryit.asp?filename=trybs_progressbar2&stacked=h
- https://www.w3schools.com/bootstrap4/bootstrap_modal.asp

RESULTS PAGE(S)
- use a collapsable sidebar to show what results and visualizations to use
- https://www.w3schools.com/howto/howto_js_collapse_sidebar.asp
- Each link in sidebar will take you to a different chart/table/graph etc.
- Main page for each results set should provide metadata about the query performed
- Provide a return to Query Page link at top right of page
- Show the query syntax that generated results for the user

ANALYSIS PAGE
- use bootstrap 4 cards to showcase the various pivots or enrichments
- include links to articles and resources in each card

EXAMPLE (d3 graph filter question):

Certainly! Filtering nodes and edges in a D3 force-directed graph can help you focus on specific parts of your data. Below is an example of how you can achieve this in JavaScript using D3.js:

Example: Filtering Nodes and Edges in a D3 Force-Directed Graph
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>D3 Force-Directed Graph</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        .node {
            stroke: #fff;
            stroke-width: 1.5px;
        }
        .link {
            stroke: #999;
            stroke-opacity: 0.6;
        }
    </style>
</head>
<body>
    <script>
        // Sample data
        const nodes = [
            { id: 1, group: 'A' },
            { id: 2, group: 'B' },
            { id: 3, group: 'A' },
            { id: 4, group: 'B' },
            { id: 5, group: 'C' }
        ];

        const links = [
            { source: 1, target: 2 },
            { source: 1, target: 3 },
            { source: 2, target: 4 },
            { source: 3, target: 5 }
        ];

        // Filter function
        function filterGraph(group) {
            const filteredNodes = nodes.filter(node => node.group === group);
            const filteredNodeIds = new Set(filteredNodes.map(node => node.id));
            const filteredLinks = links.filter(link => filteredNodeIds.has(link.source) && filteredNodeIds.has(link.target));

            return { filteredNodes, filteredLinks };
        }

        // Filter nodes and links by group 'A'
        const { filteredNodes, filteredLinks } = filterGraph('A');

        // Set up the SVG canvas dimensions
        const width = 600;
        const height = 400;

        const svg = d3.select("body").append("svg")
            .attr("width", width)
            .attr("height", height);

        // Set up the simulation
        const simulation = d3.forceSimulation(filteredNodes)
            .force("link", d3.forceLink(filteredLinks).id(d => d.id))
            .force("charge", d3.forceManyBody())
            .force("center", d3.forceCenter(width / 2, height / 2));

        // Draw the links
        const link = svg.append("g")
            .attr("class", "links")
            .selectAll("line")
            .data(filteredLinks)
            .enter().append("line")
            .attr("class", "link");

        // Draw the nodes
        const node = svg.append("g")
            .attr("class", "nodes")
            .selectAll("circle")
            .data(filteredNodes)
            .enter().append("circle")
            .attr("class", "node")
            .attr("r", 5)
            .call(d3.drag()
                .on("start", dragstarted)
                .on("drag", dragged)
                .on("end", dragended));

        // Update the simulation
        simulation.on("tick", () => {
            link
                .attr("x1", d => d.source.x)
                .attr("y1", d => d.source.y)
                .attr("x2", d => d.target.x)
                .attr("y2", d => d.target.y);
